/*
 * g++ -std=c++11 -o parser parseMassEvaluation.cpp
 */

#include <fstream>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <utility>
#include <map>

using namespace std;


vector<string> split(const char *str, char c = ' ')
{
    vector<string> result;

    do
    {
        const char *begin = str;

        while(*str != c && *str)
            str++;

        result.push_back(string(begin, str));
    } while (0 != *str++);

    return result;
}

int main(int argc, char **argv) {

  /*
    listIsotope.csv generated by
    SELECT ?item ?itemLabel ?Z ?A WHERE {
    ?item wdt:P31/wdt:P279* wd:Q25276.
    OPTIONAL { ?item wdt:P1086 ?Z. }
    OPTIONAL { ?item wdt:P1148 ?A. }
    MINUS { ?item wdt:P31 wd:Q846110 }
    SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
    }
    on query.wikidata.org
    and then exported to csv
  */
  ifstream wikifile("listIsotope.csv");
  if(!wikifile) {
    cout << "Probleme avec listIsotope.csv" << endl;
    return -1;
  }
  
  string line;
  map < pair<int,int>, string > QID_byZ_A;
  map < pair<int,int>, string > name_byZ_A;
  while(getline(wikifile,line)) {
    pair <int,int> isotope; //Z, N
    vector <string> res = split(line.c_str(),',');
    isotope = make_pair (atoi(res.at(2).c_str()),atoi(res.at(3).c_str()));
    QID_byZ_A[isotope]=res.at(0);
    name_byZ_A[isotope]=res.at(1);
  }
  wikifile.close();

  /*
    listElementLang.csv generated by
    SELECT ?item ?itemLabel ?Z WHERE {
    ?item wdt:P31 wd:Q11344.
    OPTIONAL { ?item wdt:P1086 ?Z. }
    SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
    }
    ORDER BY ?Z
    on query.wikidata.org
    and then exported to csv
  */
  ifstream elementFileEn("listElementEn.csv");
  if(!elementFileEn) {
    cout << "Probleme avec listElementEn.csv" << endl;
    return -1;
  }
  ifstream elementFileFr("listElementFr.csv");
  if(!elementFileFr) {
    cout << "Probleme avec listElementFr.csv" << endl;
    return -1;
  }
  map < int, string > elementNameEn;
  while(getline(elementFileEn,line)) {
    //Q556,hydrogen,1
    int Z;
    vector <string> res = split(line.c_str(),',');
    Z = atoi(res.at(2).c_str());
    elementNameEn[Z]=res.at(1);
  }
  elementFileEn.close();
  map < int, string > elementNameFr;
  while(getline(elementFileFr,line)) {
    //Q556,hydrogen,1
    int Z;
    vector <string> res = split(line.c_str(),',');
    Z = atoi(res.at(2).c_str());
    elementNameFr[Z]=res.at(1);
  }
  elementFileFr.close();

  
  
  ifstream infile("mass16.csv");
  if(!infile) {
    cout << "Probleme avec mass16.csv" << endl;
    return -1;
  }

  ofstream outfile("nuclearData.csv");
  ofstream outfile2("nuclearData2.csv");

  vector <string> QID, name, nameEn, nameFr;
  vector <string> elementEn, elementFr;
  vector < int > N, Z, A;
  vector <double> massExcess, bindingEnergy, atomicMass;
  vector <double> massExcessUnc, bindingEnergyUnc, atomicMassUnc;
  vector <bool> massExcessEst, bindingEnergyEst, atomicMassEst;

  while(getline(infile,line)) {
    if(line.find(",,,,,,,      (keV),,  (keV),,,    (keV),,,  (micro-u),") != string::npos)
      while(getline(infile,line))  {
	vector <string> res = split(line.c_str(),',');

	N.push_back(atoi(res.at(2).c_str()));
	Z.push_back(atoi(res.at(3).c_str()));
	pair <int,int> isotope;
	isotope = make_pair(Z.back(), N.back());
	QID.push_back(QID_byZ_A[isotope]);
	name.push_back(name_byZ_A[isotope]);
	
	stringstream isotopeName;
	isotopeName << elementNameEn[Z.back()] << "-" << Z.back()+N.back();
	nameEn.push_back(isotopeName.str());
	isotopeName.str("");
	isotopeName << elementNameFr[Z.back()] << " " << Z.back()+N.back();
	nameFr.push_back(isotopeName.str());

	elementEn.push_back(elementNameEn[Z.back()]);
	elementFr.push_back(elementNameFr[Z.back()]);
	
	massExcess.push_back(atof(res.at(7).c_str()));
	if(res.at(7).find("#")!=string::npos) massExcessEst.push_back(true);
	else massExcessEst.push_back(false);
	massExcessUnc.push_back(atof(res.at(8).c_str()));

	bindingEnergy.push_back(atof(res.at(9).c_str()));
	if(res.at(9).find("#")!=string::npos) bindingEnergyEst.push_back(true);
	else bindingEnergyEst.push_back(false);
	bindingEnergyUnc.push_back(atof(res.at(10).c_str()));

	atomicMass.push_back(atof(res.at(14).c_str())+atof(res.at(15).c_str())/1.e6);
	if(res.at(15).find("#")!=string::npos) atomicMassEst.push_back(true);
	else atomicMassEst.push_back(false);
	atomicMassUnc.push_back(atof(res.at(16).c_str())/1.e6);

	cout << setprecision(12) <<  Z.back() << "_" << N.back() << ", " << QID.back() << endl;

	if( !QID.back().empty() )
	  outfile << setprecision(12) << QID.back() << "," << name.back() << ","
		  << Z.back()+N.back() << ","
		  << massExcess.back() << "," << massExcessUnc.back() << "," << massExcessEst.back() << ","
		  << bindingEnergy.back() << "," << bindingEnergyUnc.back() << "," << bindingEnergyEst.back() << ","
		  << atomicMass.back() << "," << atomicMassUnc.back() << "," << atomicMassEst.back() << endl;
	else {
	  outfile2  << setprecision(12) << nameEn.back() << "," << nameFr.back() << ","
		    << elementEn.back() << "," << elementFr.back() << ","
		    << Z.back() << "," << N.back() << ","
		    << massExcess.back() << "," << massExcessUnc.back() << "," << massExcessEst.back() << ","
		    << bindingEnergy.back() << "," << bindingEnergyUnc.back() << "," << bindingEnergyEst.back() << ","
		    << atomicMass.back() << "," << atomicMassUnc.back() << "," << atomicMassEst.back() << endl;
	}
	    
	// if(atomicMassEst.back())
	//   cout << setprecision(12) <<  Z.back() << "_" << A.back() << ", " << atomicMass.back() << " +- " << atomicMassUnc.back() << " !!!" << endl;
	// else
	//   cout << setprecision(12) <<  Z.back() << "_" << A.back() << ", " << atomicMass.back() << " +- " << atomicMassUnc.back() << endl;
	// if(massExcessEst.back())
	//   cout << setprecision(12) <<  Z.back() << "_" << A.back() << ", " << massExcess.back() << " +- " << massExcessUnc.back() << " !!!" << endl;
	// else
	//   cout << setprecision(12) <<  Z.back() << "_" << A.back() << ", " << massExcess.back() << " +- " << massExcessUnc.back() << endl;
      }
  }
  outfile.close();
  infile.close();
}
